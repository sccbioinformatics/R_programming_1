[["index.html", "An introduction to R programming 1 Introduction 1.1 Practice makes perfect 1.2 Why Use R? 1.3 What other languages do bioinformaticians use? 1.4 Getting R and RStudio", " An introduction to R programming Shamit Soneji 2022-09-20 1 Introduction The purpose of this course is to teach you the basics of the R language and give you the confidence to tackle larger projects using the language. Importantly, we want to get you thinking like a programmer. This doesn’t mean that by the end of the course you will know R fully, but you will know enough so you can go online and look for the help you need to complete most tasks. 1.1 Practice makes perfect Programming is like any skill, the more you practice the better you get. It’s really important that you keep using what you have learned after the course is completed otherwise there is a good chance you will forget everything and you’ll be back to square one. 1.2 Why Use R? R is a programming language with a focus on mathematics and statistics, but R can be used for a wide variety of applications given the flexibility of the language. R is also free, and available for all operating systems. Given the richness of the language and no cost to use it, bioinformaticians have used R for more than 20 years as the platform for which which to develop packages to solve bioinformatics problems. The BioConductor Project is a repository for bioinformatics tools which continues to grow, and hosts packages such as DESeq2 which you may have heard of. Some other popular packages such as Seurat aren’t actually hosted by Bioconductor, but in the main R package repository. We’ll cover package installation later later. 1.3 What other languages do bioinformaticians use? The Python language has been rocketing in popularity for the past few years, particularly among data scientists whi make use of the AI/ML tools such as Tensorflow and PyTorch. Scanpy is a very popular package for single-cell analysis. For very computationally intensive tasks (e.g sequence alignment), languages such as C/C++/Rust are more commonly used, but these are far more difficult to learn. 1.4 Getting R and RStudio Point your browser to http://cran.r-project.org/ to download and install the latest version of R. For these tutorials we are also going to use RStudio which is an advanced development environment for R which includes a window for an editor, console, and plotting window. You will see what this means later. "],["rstudio.html", " 2 RStudio", " 2 RStudio Open up RStudio, and it will look something like this: The different parts are: The code editor. This is where you write code. The R console. This is the R environment where R code is executed. Workspace. The objects you create along the way will be listed here. Plots and files. Plots will render here, and files can be browsed in the “Files” pane. Before we start, we need to do a little prep. On your computer, make a folder called “Rcourse1”. We then set the working directroy to this folder, so In RStudio go to Session &gt; Set Working Directory &gt; Choose Directory and find the “Rcourse1” folder and select it. RStudio will now be looking for files in this folder, and any saved plots will be put here unless stated otherwise. Now, go to File &gt; New File &gt; R Script A new empty script will open up in the top left window. Go to File &gt; Save and give it a name. It will them be saved to you current working directory. You should see your file being added to the list in the Plot and Files pane. Now that we’ve done our prep, let do some R. "],["thebasics.html", " 3 The Basics 3.1 Assigning a variable.", " 3 The Basics We’ll now look at some basic operations. The code should be copied into your R script as we go along. 3.1 Assigning a variable. Into your script copy/type the following line: x &lt;- c(1,2,3,4,5,6,7,8,9,10) This will make a vector of values from 1 to 10, and put them into a variable called x. Execute the code by hitting the “Run” button at the top-right of the script window. You will see this line appear in the R console below. To view the contents of the object you have just created, just type x in the console and hit return: x ## [1] 1 2 3 4 5 6 7 8 9 10 The contents of x are now printed out. Now is a good time to learn about commenting and documenting code. This is free text you put into your scripts that tell the reader whats going on, and to remind your future self of what you did. Comments are put in using #, so for example: x &lt;- c(1,2,3,4,5,6,7,8,9,10) # This is a comment. Anything after a # will be ignored. You can run the code again to check. Back to vectors. There is a much simpler way to create the same type of object: x &lt;- 1:10 x ## [1] 1 2 3 4 5 6 7 8 9 10 Much better. Using a comma will always do increments of 1, but is also bidirectional: y &lt;- 5:-5 y ## [1] 5 4 3 2 1 0 -1 -2 -3 -4 -5 Another way of creating a sequence of numbers is to use the seq function. To learn how this function works, issue the command help(seq). In R you can get a manual for any function using the help() command. To generate a vector of numbers from 1 to 100 in steps of 10 we need: a &lt;- seq(0,100,by=10) a ## [1] 0 10 20 30 40 50 60 70 80 90 100 Exercise: Generate a vector called ‘b’ ranging from 3 to 987 where the length of the vector is 53 entries long. Done? Check the length of the vector you have just made by issuing length(b). "],["parts.html", " 4 Parts", " 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", " 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2022) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", " 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", " 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
